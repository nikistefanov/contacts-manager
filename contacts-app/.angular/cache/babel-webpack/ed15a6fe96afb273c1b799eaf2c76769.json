{"ast":null,"code":"import _asyncToGenerator from \"/Users/nstefano/Documents/ng-strapi/contacts-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n\n  register(user) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const registerPromise = new Promise((resolve, reject) => {\n        _this.httpClient.post(\"http://localhost:1337/auth/local/register\", {\n          username: user.username,\n          email: user.email,\n          password: user.password\n        }).subscribe(data => {\n          if (!data) {\n            reject();\n          } else {\n            resolve(data);\n          }\n        });\n      });\n      return registerPromise;\n    })();\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/nstefano/Documents/ng-strapi/contacts-app/src/app/shared/services/auth/auth.service.ts"],"names":["i0","i1","AuthService","constructor","httpClient","register","user","registerPromise","Promise","resolve","reject","post","username","email","password","subscribe","data","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKA,UAAL,GAAkBA,UAAlB;AACH;;AACKC,EAAAA,QAAQ,CAACC,IAAD,EAAO;AAAA;;AAAA;AACjB,YAAMC,eAAe,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrD,QAAA,KAAI,CAACN,UAAL,CAAgBO,IAAhB,CAAqB,2CAArB,EAAkE;AAC9DC,UAAAA,QAAQ,EAAEN,IAAI,CAACM,QAD+C;AAE9DC,UAAAA,KAAK,EAAEP,IAAI,CAACO,KAFkD;AAG9DC,UAAAA,QAAQ,EAAER,IAAI,CAACQ;AAH+C,SAAlE,EAIGC,SAJH,CAIcC,IAAD,IAAU;AACnB,cAAI,CAACA,IAAL,EAAW;AACPN,YAAAA,MAAM;AACT,WAFD,MAGK;AACDD,YAAAA,OAAO,CAACO,IAAD,CAAP;AACH;AACJ,SAXD;AAYH,OAbuB,CAAxB;AAcA,aAAOT,eAAP;AAfiB;AAgBpB;;AApBoB;;AAsBzBL,WAAW,CAACe,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIjB,WAAV,EAAuBF,EAAE,CAACoB,QAAH,CAAYnB,EAAE,CAACoB,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACAnB,WAAW,CAACoB,KAAZ,GAAoB,aAActB,EAAE,CAACuB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEtB,WAAT;AAAsBuB,EAAAA,OAAO,EAAEvB,WAAW,CAACe,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n    }\n    async register(user) {\n        const registerPromise = new Promise((resolve, reject) => {\n            this.httpClient.post(\"http://localhost:1337/auth/local/register\", {\n                username: user.username,\n                email: user.email,\n                password: user.password,\n            }).subscribe((data) => {\n                if (!data) {\n                    reject();\n                }\n                else {\n                    resolve(data);\n                }\n            });\n        });\n        return registerPromise;\n    }\n}\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient)); };\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}